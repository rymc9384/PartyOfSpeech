cat("\n\tZetas:\n")
summary(df$zeta[tokeep==0])
## 3.2) Subset data frame using sampled ngrams
df <- df[tokeep==1,]
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes = c("singular", "plural"), regexs = c(SING.re, PLUR.re), leg = F)
)
points(1,10, pch=22, bg="black")
source("D:/Dropbox/Dissertation/02-pos_senate/01-code/PartyOfSpeech/06-robustness/utils_fw.R")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes = c("singular", "plural"), regexs = c(SING.re, PLUR.re), leg = F)
)
rm(list = ls())
options(stringsAsFactors = F)
set.seed(1124)
sessionInfo()
##############################
### 0) UTILITIES
##############################
# Call util functions into Global Env:
source("D:/Dropbox/Dissertation/02-pos_senate/01-code/PartyOfSpeech/06-robustness/utils_fw.R")
SING.re <- "((?<=i)|(?<=(me|he|it|my))|(?<=(she|him|her|his|its))|(?<=(this|that|mine|hers))|(?<=myself)|(?<=(himself|herself))|(?<=yourself))_PRP[$]?(?=($| ))"
PLUR.re <- "((?<=(we|us))|(?<=^our)|(?<= our)|(?<=(they|them|ours))|(?<=(these|those|their))|(?<=theirs)|(?<=ourselves)|(?<=(yourselves|themselves)))_PRP[$]?(?=($| ))"
##############################
### 1) LOAD DATA
##############################
## 1.0) Read in output from "/05-analysis/05-pronoun_ngram_fightin_words.py":
df <- read.csv("D:/cong_text/robust/exploratory/pronoun_ngrams_raw.csv")
## 1.1) Format word column and make tagged column:
df$tagged <- df$word
df$word <- gsub(pattern = "_.*?(?=($| ))", '', df$word, perl = T)
##############################
### 2) TOP NGRAMS
##############################
## 2.0) Print most partisan words:
cat("\n\n**** MOST PARTISAN BI & TRIGRAMS ****")
cat("\n\tDEMS:\n")
head(df[order(df$zeta),], 20)
cat("\n\tREPS:\n")
tail(df[order(df$zeta),], 20)
##############################
### 3) SAMPLING NGRAMS
##############################
## 3.0) Sample low count words
PRkeep <- log(df$count)/3
PRkeep <- ifelse(PRkeep >= 1, 1, PRkeep)
tokeep <- rbinom(n = PRkeep, size = 1, prob = PRkeep)
## 3.1) Print summary of sampled and omitted ngrams:
cat("\n\n**** SAMPLED NGRAM SUMMARIES ****")
cat("\n\tCounts:\n")
summary(df$count[tokeep==1])
cat("\n\tZetas:\n")
summary(df$zeta[tokeep==1])
cat("\n\n**** DROPPED NGRAM SUMMARIES ****")
cat("\n\tCounts:\n")
summary(df$count[tokeep==0])
cat("\n\tZetas:\n")
summary(df$zeta[tokeep==0])
## 3.2) Subset data frame using sampled ngrams
df <- df[tokeep==1,]
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes = c("singular", "plural"), regexs = c(SING.re, PLUR.re), leg = F)
)
fw_nowords_plot <- function(words, tagged, zeta, freq, groups=c("GOP","DEM"), classes=c("past", "future"), regexs=c("VB(D|N)","MD"), cols=c("#d7191c","#fdae61","#2b83ba","#99d594"), nwords=15, zcut=1.96, ylims=NULL, yspace=NULL, ylabel=NULL, leg=NULL){
####
## ARGS:
####
# words, vector(str): character vector of lemmas
# tagged, vector(str): character vector of tagged lemmas
# zeta, vector(float): vector of zeta values from Fightin' Words model
# freq, vector(int): total frequency for each token
# groups, (str1, str2): pair of strings naming the groups being compared
# classes, (str1, str2): pair of strings of word classes being examined;
#                        first class is supposed to go with group1, second with second group;
# regexs, (str1, str2): pair of regular expressions identifying each word class
# cols, (str1,...,str4): colors for text and points; first color is for positive
#                         zeta values (i.e., group1) in class1, second for positive zetas in class2,
#                         third for negative zetas (i.e., group2) in class2; fourth for negative
#                         zetas in class1
# nwords, int: number of words to display on right-hand side of plot for each group
# zcut, float: critical value for zeta; tokens w/ zetas below critical val have gray fill,
#               otherwise colored according to group and class
# ylims, (numeric, numeric): lower and upper bounds for plot (optional)
# yspace, numeric: how far apart to place y-axis labels (optional)
# ylabel, expression *OR* str:
# leg, bool: if null (default), put in legend; else do not include legend
#
####
# plot limits
xlims <- c(-1, max(log(freq)) + 3)
if (is.null(ylims)){
ylims <- round(max(abs(zeta)) + 5, -1)
ylims <- c(-ylims, ylims)
}
# xaxis labels
xat <- c(-1, log(1), log(100), log(1000), log(10000), log(100000))
xtics <- c("", 1, 100, 1000, 10000, 100000)
xlab <- "Word Frequency in Topic"
# ylab labels
if (is.null(yspace)){
yrng <- ylims[2] - ylims[1]
if (yrng > 50){
yat <- seq(ylims[1], ylims[2], by=10)
} else{
yat <- seq(ylims[1], ylims[2], by=5)
}
} else{
yat <- seq(ylims[1], ylims[2], by=yspace)
}
if (is.null(ylabel)){
ylab <- expression(zeta[kw]^(R-D))
} else{
ylab <- ylabel
}
# points to label
tolab1 <- which(zeta %in% tail(sort(zeta), nwords) & zeta >= zcut)
tolab2 <- which(zeta %in% head(sort(zeta), nwords) & zeta <= -zcut)
# add stars to sig words
words <- star(words, zeta, zcut)
# words to appear on right
wlist1 <- which(zeta %in% tail(sort(zeta), nwords))
wlist1 <- wlist1[order(zeta[wlist1])]
wlist2 <- which(zeta %in% head(sort(zeta), nwords))
wlist2 <- wlist2[order(zeta[wlist2])]
# getting spacing for right-side lists:
ylist1 <- zeta[wlist1] / sum(zeta[wlist1]) #top list
ylist1 <- (ylims[2] - 1.25) * ylist1
ylist1 <- cumsum(ylist1)
ylist2 <- zeta[wlist2] / sum(zeta[wlist2]) # bottom list
ylist2 <- (abs(ylims[1]) - 1.25) * ylist2
ylist2 <- cumsum(c(0, ylist2[-length(ylist2)]))
# words coloring
class1 <- grepl(pattern = regexs[1], x = tagged, perl=T)
class2 <- grepl(pattern = regexs[2], x = tagged, perl=T)
# label coloring
wlist1.1 <- wlist1[which(class1[wlist1] == T)] # aligned class & group 1
wlist1.2 <- wlist1[which(class2[wlist1] == T)] # misaligned class & group 1
wlist2.1 <- wlist2[which(class2[wlist2] == T)] # aligned class & group 2
wlist2.2 <- wlist2[which(class1[wlist2] == T)] # misaligned class & group 2
# getting order for right-side lists
worder1.1 <- which(wlist1 %in% wlist1.1)
worder1.2 <- which(wlist1 %in% wlist1.2)
worder2.1 <- which(wlist2 %in% wlist2.1)
worder2.2 <- which(wlist2 %in% wlist2.2)
# neither class
worder1.0 <- which(wlist1 %in% wlist1.1 == F & wlist1 %in% wlist1.2 == F)
worder2.0 <- which(wlist2 %in% wlist2.1 == F & wlist2 %in% wlist2.2 == F)
wlist1.0 <- wlist1[which(wlist1 %in% wlist1.1 == F & wlist1 %in% wlist1.2 == F)]
wlist2.0 <- wlist2[which(wlist2 %in% wlist2.1 == F & wlist2 %in% wlist2.2 == F)]
# plot
par(mar = c(5,7,2,2))
plot(0,0, type="n", xlim = xlims, ylim = ylims, xlab = xlab, ylab = ylab, cex.lab = 2, axes = F)
axis(side = 1, at = xat, labels = xtics, cex.axis = 1.5)
axis(side = 2, at = yat, cex.axis = 1.5)
points(log(freq[abs(zeta) < zcut]), zeta[abs(zeta) < zcut], pch=21, bg="grey70", col="grey70", cex=abs(zeta[abs(zeta) < zcut]) / 2)
points(log(freq[zeta >= zcut & class1 == T]), zeta[zeta >= zcut & class1 == T], pch=21, bg=cols[1], col=cols[1], cex=zeta[zeta >= zcut & class1 == T] / 2)
points(log(freq[zeta >= zcut & class2 == T]), zeta[zeta >= zcut & class2 == T], pch=23, bg=cols[2], col=cols[2], cex=zeta[zeta >= zcut & class2 == T] / 2)
points(log(freq[zeta >= zcut & class1 == F & class2 == F]), zeta[zeta >= zcut & class1 == F & class2 == F], pch=22, bg="black", cex=zeta[zeta >= zcut & class1 == F & class2 == F] / 2)
points(log(freq[zeta <= -zcut & class2 == T]), zeta[zeta <= -zcut & class2 == T], pch=21, bg=cols[3], col=cols[3], cex=abs(zeta[zeta <= -zcut & class2 == T]) / 2)
points(log(freq[zeta <= -zcut & class1 == T]), zeta[zeta <= -zcut & class1 == T], pch=23, bg=cols[4], col=cols[4], cex=abs(zeta[zeta <= -zcut & class1 == T]) / 2)
points(log(freq[zeta <= -zcut & class1 == F & class2 == F]), zeta[zeta <= -zcut & class1 == F & class2 == F], pch=22, bg="black", cex=zeta[zeta<= -zcut & class1 == F & class2 == F] / 2)
# Group labels on right
text(x = xlims[2], y = ylims[2], labels = groups[1], col = cols[1], cex = 3, pos = 2)
text(x = xlims[2], y = ylims[1], labels = groups[2], col = cols[3], cex = 3, pos = 2)
# Group word lists
if (length(wlist1.0) > 0){
text(x = xlims[2], y = (0.25 + ylist1)[worder1.0], labels = words[wlist1.0], cex = zeta[wlist1.0] / 2.5, pos = 2)
}
text(x = xlims[2], y = (0.25 + ylist1)[worder1.1], labels = words[wlist1.1], cex = zeta[wlist1.1] / 2.5, col = cols[1], pos = 2)
if (length(wlist1.2) > 0){
text(x = xlims[2], y = (0.25 + ylist1)[worder1.2], labels = words[wlist1.2], cex = zeta[wlist1.2] / 2.5, col = cols[2], pos = 2)
}
if (length(wlist2.0) > 0){
text(x = xlims[2], y = (ylims[1] + 1 + ylist2)[worder2.0], labels = words[wlist2.0], cex = abs(zeta[wlist2.0]) / 2.5, pos = 2)
}
text(x = xlims[2], y = (ylims[1] + 1 + ylist2)[worder2.1], labels = words[wlist2.1], cex = abs(zeta[wlist2.1]) / 2.5, col = cols[3], pos = 2)
if (length(wlist2.2) > 0){
text(x = xlims[2], y = (ylims[1] + 1 + ylist2)[worder2.2], labels = words[wlist2.2], cex = abs(zeta[wlist2.2]) / 2.5, col = cols[4], pos = 2)
}
if (is.null(leg)){
legend("topleft", legend = c(paste(groups[1], classes[1]),
paste(groups[1], classes[2]),
paste(groups[2], classes[2]),
paste(groups[2], classes[1])),
pch = c(21,23,21,23), pt.bg = cols, col = cols, pt.cex = 2, inset = 0.05, bty = "n")
}
}
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
fw_nowords_plot <- function(words, tagged, zeta, freq, groups=c("GOP","DEM"), classes=c("past", "future"), regexs=c("VB(D|N)","MD"), cols=c("#d7191c","#fdae61","#2b83ba","#99d594"), nwords=15, zcut=1.96, ylims=NULL, yspace=NULL, ylabel=NULL, leg=NULL){
####
## ARGS:
####
# words, vector(str): character vector of lemmas
# tagged, vector(str): character vector of tagged lemmas
# zeta, vector(float): vector of zeta values from Fightin' Words model
# freq, vector(int): total frequency for each token
# groups, (str1, str2): pair of strings naming the groups being compared
# classes, (str1, str2): pair of strings of word classes being examined;
#                        first class is supposed to go with group1, second with second group;
# regexs, (str1, str2): pair of regular expressions identifying each word class
# cols, (str1,...,str4): colors for text and points; first color is for positive
#                         zeta values (i.e., group1) in class1, second for positive zetas in class2,
#                         third for negative zetas (i.e., group2) in class2; fourth for negative
#                         zetas in class1
# nwords, int: number of words to display on right-hand side of plot for each group
# zcut, float: critical value for zeta; tokens w/ zetas below critical val have gray fill,
#               otherwise colored according to group and class
# ylims, (numeric, numeric): lower and upper bounds for plot (optional)
# yspace, numeric: how far apart to place y-axis labels (optional)
# ylabel, expression *OR* str:
# leg, bool: if null (default), put in legend; else do not include legend
#
####
# plot limits
xlims <- c(-1, max(log(freq)) + 3)
if (is.null(ylims)){
ylims <- round(max(abs(zeta)) + 5, -1)
ylims <- c(-ylims, ylims)
}
# xaxis labels
xat <- c(-1, log(1), log(100), log(1000), log(10000), log(100000))
xtics <- c("", 1, 100, 1000, 10000, 100000)
xlab <- "Word Frequency in Topic"
# ylab labels
if (is.null(yspace)){
yrng <- ylims[2] - ylims[1]
if (yrng > 50){
yat <- seq(ylims[1], ylims[2], by=10)
} else{
yat <- seq(ylims[1], ylims[2], by=5)
}
} else{
yat <- seq(ylims[1], ylims[2], by=yspace)
}
if (is.null(ylabel)){
ylab <- expression(zeta[kw]^(R-D))
} else{
ylab <- ylabel
}
# points to label
tolab1 <- which(zeta %in% tail(sort(zeta), nwords) & zeta >= zcut)
tolab2 <- which(zeta %in% head(sort(zeta), nwords) & zeta <= -zcut)
# add stars to sig words
words <- star(words, zeta, zcut)
# words to appear on right
wlist1 <- which(zeta %in% tail(sort(zeta), nwords))
wlist1 <- wlist1[order(zeta[wlist1])]
wlist2 <- which(zeta %in% head(sort(zeta), nwords))
wlist2 <- wlist2[order(zeta[wlist2])]
# getting spacing for right-side lists:
ylist1 <- zeta[wlist1] / sum(zeta[wlist1]) #top list
ylist1 <- (ylims[2] - 1.25) * ylist1
ylist1 <- cumsum(ylist1)
ylist2 <- zeta[wlist2] / sum(zeta[wlist2]) # bottom list
ylist2 <- (abs(ylims[1]) - 1.25) * ylist2
ylist2 <- cumsum(c(0, ylist2[-length(ylist2)]))
# words coloring
class1 <- grepl(pattern = regexs[1], x = tagged, perl=T)
class2 <- grepl(pattern = regexs[2], x = tagged, perl=T)
# label coloring
wlist1.1 <- wlist1[which(class1[wlist1] == T)] # aligned class & group 1
wlist1.2 <- wlist1[which(class2[wlist1] == T)] # misaligned class & group 1
wlist2.1 <- wlist2[which(class2[wlist2] == T)] # aligned class & group 2
wlist2.2 <- wlist2[which(class1[wlist2] == T)] # misaligned class & group 2
# getting order for right-side lists
worder1.1 <- which(wlist1 %in% wlist1.1)
worder1.2 <- which(wlist1 %in% wlist1.2)
worder2.1 <- which(wlist2 %in% wlist2.1)
worder2.2 <- which(wlist2 %in% wlist2.2)
# neither class
worder1.0 <- which(wlist1 %in% wlist1.1 == F & wlist1 %in% wlist1.2 == F)
worder2.0 <- which(wlist2 %in% wlist2.1 == F & wlist2 %in% wlist2.2 == F)
wlist1.0 <- wlist1[which(wlist1 %in% wlist1.1 == F & wlist1 %in% wlist1.2 == F)]
wlist2.0 <- wlist2[which(wlist2 %in% wlist2.1 == F & wlist2 %in% wlist2.2 == F)]
# plot
par(mar = c(5,7,2,2))
plot(0,0, type="n", xlim = xlims, ylim = ylims, xlab = xlab, ylab = ylab, cex.lab = 2, axes = F)
axis(side = 1, at = xat, labels = xtics, cex.axis = 1.5)
axis(side = 2, at = yat, cex.axis = 1.5)
points(log(freq[abs(zeta) < zcut]), zeta[abs(zeta) < zcut], pch=21, bg="grey70", col="grey70", cex=abs(zeta[abs(zeta) < zcut]) / 2)
points(log(freq[zeta >= zcut & class1 == T]), zeta[zeta >= zcut & class1 == T], pch=21, bg=cols[1], col=cols[1], cex=zeta[zeta >= zcut & class1 == T] / 2)
points(log(freq[zeta >= zcut & class2 == T]), zeta[zeta >= zcut & class2 == T], pch=23, bg=cols[2], col=cols[2], cex=zeta[zeta >= zcut & class2 == T] / 2)
points(log(freq[zeta >= zcut & class1 == F & class2 == F]), zeta[zeta >= zcut & class1 == F & class2 == F], pch=22, bg="black", cex=zeta[zeta >= zcut & class1 == F & class2 == F] / 2)
points(log(freq[zeta <= -zcut & class2 == T]), zeta[zeta <= -zcut & class2 == T], pch=21, bg=cols[3], col=cols[3], cex=abs(zeta[zeta <= -zcut & class2 == T]) / 2)
points(log(freq[zeta <= -zcut & class1 == T]), zeta[zeta <= -zcut & class1 == T], pch=23, bg=cols[4], col=cols[4], cex=abs(zeta[zeta <= -zcut & class1 == T]) / 2)
points(log(freq[zeta <= -zcut & class1 == F & class2 == F]), zeta[zeta <= -zcut & class1 == F & class2 == F], pch=22, bg="black", cex=abs(zeta[zeta<= -zcut & class1 == F & class2 == F]) / 2)
# Group labels on right
text(x = xlims[2], y = ylims[2], labels = groups[1], col = cols[1], cex = 3, pos = 2)
text(x = xlims[2], y = ylims[1], labels = groups[2], col = cols[3], cex = 3, pos = 2)
# Group word lists
if (length(wlist1.0) > 0){
text(x = xlims[2], y = (0.25 + ylist1)[worder1.0], labels = words[wlist1.0], cex = zeta[wlist1.0] / 2.5, pos = 2)
}
text(x = xlims[2], y = (0.25 + ylist1)[worder1.1], labels = words[wlist1.1], cex = zeta[wlist1.1] / 2.5, col = cols[1], pos = 2)
if (length(wlist1.2) > 0){
text(x = xlims[2], y = (0.25 + ylist1)[worder1.2], labels = words[wlist1.2], cex = zeta[wlist1.2] / 2.5, col = cols[2], pos = 2)
}
if (length(wlist2.0) > 0){
text(x = xlims[2], y = (ylims[1] + 1 + ylist2)[worder2.0], labels = words[wlist2.0], cex = abs(zeta[wlist2.0]) / 2.5, pos = 2)
}
text(x = xlims[2], y = (ylims[1] + 1 + ylist2)[worder2.1], labels = words[wlist2.1], cex = abs(zeta[wlist2.1]) / 2.5, col = cols[3], pos = 2)
if (length(wlist2.2) > 0){
text(x = xlims[2], y = (ylims[1] + 1 + ylist2)[worder2.2], labels = words[wlist2.2], cex = abs(zeta[wlist2.2]) / 2.5, col = cols[4], pos = 2)
}
if (is.null(leg)){
legend("topleft", legend = c(paste(groups[1], classes[1]),
paste(groups[1], classes[2]),
paste(groups[2], classes[2]),
paste(groups[2], classes[1])),
pch = c(21,23,21,23), pt.bg = cols, col = cols, pt.cex = 2, inset = 0.05, bty = "n")
}
}
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, inset = 0.05, bty = "n")
cols <- c("#d7191c","#fdae61","#2b83ba","#99d594","black")
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, inset = 0.05, bty = "n")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, inset = 0.05, cex=1.5, bty = "n")
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, ncol = 2, inset = 0.05, cex=1.5, bty = "n")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, ncol = 2, inset = 0.05, cex=1.5, bty = "n")
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, ncol = 3, inset = 0.05, cex=1.5, bty = "n")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural",
"Dem plural", "Dem singular",
"Ambiguous number"),
pch = c(21,23,21,23,22), pt.bg = cols, col = cols, pt.cex = 2, ncol = 3, inset = 0.05, cex=1.5, bty = "n")
cols <- c("#d7191c","#fdae61","black","#2b83ba","#99d594")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural", "Ambiguous number",
"Dem plural", "Dem singular"),
pch = c(21,23,22,21,23), pt.bg = cols, col = cols, pt.cex = 2, ncol = 3, inset = 0.05, cex=1.5, bty = "n")
legend("topleft", legend = c("GOP singular", "GOP plural", "Ambiguous number",
"Dem plural", "Dem singular"),
pch = c(21,23,22,21,23), pt.bg = cols, col = cols, pt.cex = 2, ncol = 2, inset = 0.05, cex=1.5, bty = "n")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural", "Ambiguous number",
"Dem plural", "Dem singular"),
pch = c(21,23,22,21,23), pt.bg = cols, col = cols, pt.cex = 2, ncol = 2, inset = 0.05, cex=1.5, bty = "n")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural", "Ambiguous number",
"Dem plural", "Dem singular"),
pch = c(21,23,22,21,23), pt.bg = cols, col = cols, pt.cex = 2, ncol = 2, inset = 0.05, cex=1.25, bty = "n")
with(data = df,
fw_nowords_plot(words=word, tagged=tagged, zeta=zeta/4.42, freq=count, nwords=15, zcut=1,
classes=c("singular", "plural"), regexs=c(SING.re, PLUR.re),
ylabel=expression(zeta[w]^(R-D)/4.42), leg=F)
)
legend("topleft", legend = c("GOP singular", "GOP plural", "Ambiguous number",
"Dem plural", "Dem singular"),
pch = c(21,23,22,21,23), pt.bg = cols, col = cols, pt.cex = 2, ncol = 2, inset = 0.05, cex=1.25, bty = "n")
nrow(df)
rm(list = ls())
library(stringr)
options(stringsAsFactors = F)
source("D:/Dropbox/Dissertation/02-pos_senate/01-code/PartyOfSpeech/06-robustness/utils_fw.R")
## Regex expressions:
FUTVB.re <- "[a-z]+_MD( [a-z]+_RB)? [a-z]+_VB"
PASTVB.re <- "[a-z]+_(VBD|VBN)"
ALLVB.re <- "[a-z]+_VB[A-Z]{0,1}"
## Read in text:
df <- read.csv("D:/cong_text/final_pos/topic_lemtag_merged_114.csv")
## Read in senator meta info:
seninfo <- read.csv("D:/cong_text/robust/senator_info_links_id_female.csv")
## merge senator sex into text data:
df <- merge(df, seninfo[,c("sen", "female")], by="sen", all.x = T)
## Cleaning newlines out
df$lemma_text <- gsub(pattern = "[\n]", replacement = '', df$lemma_text)
df$pastvb <- str_extract_all(string = df$lemma_text, pattern = PASTVB.re)
df$futvb <- str_extract_all(string = df$lemma_text, pattern = FUTVB.re)
df$allvb <- str_extract_all(string = df$lemma_text, pattern = ALLVB.re)
df$words <- NA
for (i in 1:nrow(df)){
df$words[i] <- count_tokens(df$lemma_text[i])
}
vbR <- make_counts(x = df, count_cols = c('futvb', 'pastvb', 'allvb'),
party = 'R', topic = 0, totalcol = 'words',
outcolnames = c('word', 'counts1', 'priors1'))
vbD <- make_counts(x = df, count_cols = c('futvb', 'pastvb', 'allvb'),
party = 'D', topic = 0, totalcol = 'words',
outcolnames = c('word', 'counts2', 'priors2'))
vbAll <- merge(x = do.call(rbind, vbR$counts[c(2)]),
y = do.call(rbind, vbD$counts[c(2)]),
by="word", all = T)
# avoid numerical errors:
vbAll[is.na(vbAll[,2]),2] <- 0
vbAll[is.na(vbAll[,3]),3] <- 0.01
vbAll[is.na(vbAll[,4]),4] <- 0
vbAll[is.na(vbAll[,5]),5] <- 0.01
fw_vbs <- fightin(n1 = vbR$nwords, n2 = vbD$nwords,
counts1 = vbAll$counts1, counts2 = vbAll$counts2,
priors1 = vbAll$priors1, priors2 = vbAll$priors2)
fw_vbs$word <- vbAll$word
head(fw_vbs[order(fw_vbs$zeta),], 20)
tail(fw_vbs[order(fw_vbs$zeta),], 20)
with(fw_vbs, fw_nowords_plot(words = )
with(fw_vbs,
fw_vbs$tagged <- fw_vbs$word
fw_vbs$word <- gsub(pattern = "_.*?(?=($| ))", replacement = '', x = fw_vbs$tagged, perl = T)
with(fw_vbs,
fw_nowords_plot(word, tagged, zeta, freq, nwords = 15, zcut = 1.96, ylims=c(-8,8), yspace=2)
)
with(fw_vbs,
fw_nowords_plot(word, tagged, zeta/4.42, freq, nwords = 15, zcut = 1.96, ylims=c(-8,8), yspace=2)
)
with(fw_vbs,
fw_nowords_plot(word, tagged, zeta/4.42, freq, regexs = c("VB(D|N)","VB(D|N)"),nwords = 15, zcut = 1.96, ylims=c(-8,8), yspace=2)
)
with(fw_vbs,
fw_nowords_plot(word, tagged, zeta/4.42, freq, regexs = c("VBD","VBN"),nwords = 15, zcut = 1.96, ylims=c(-8,8), yspace=2)
)
204310/48527
366399 - 204310
162089/48527
162089/(48527/2)
204310/(48527/2)
48527/2
162089/24250
204310/24250
162089/24263
162089/24264
204310/24264
8.425155 - 6.684082
8.43-6.68
8.42-6.68
View(fw_vbs)
View(fw_vbs)
rm(list = ls())
options(stringsAsFactors = F)
set.seed(1124)
sessionInfo()
##############################
### 0) UTILITIES
##############################
# Call util functions into Global Env:
source("D:/Dropbox/Dissertation/02-pos_senate/01-code/PartyOfSpeech/06-robustness/utils_fw.R")
SING.re <- "((?<=i)|(?<=(me|he|it|my))|(?<=(she|him|her|his|its))|(?<=(this|that|mine|hers))|(?<=myself)|(?<=(himself|herself))|(?<=yourself))_PRP[$]?(?=($| ))"
PLUR.re <- "((?<=(we|us))|(?<=^our)|(?<= our)|(?<=(they|them|ours))|(?<=(these|those|their))|(?<=theirs)|(?<=ourselves)|(?<=(yourselves|themselves)))_PRP[$]?(?=($| ))"
##############################
### 1) LOAD DATA
##############################
## 1.0) Read in output from "/05-analysis/05-pronoun_ngram_fightin_words.py":
df <- read.csv("D:/cong_text/robust/exploratory/pronoun_ngrams_raw.csv")
## 1.1) Format word column and make tagged column:
df$tagged <- df$word
df$word <- gsub(pattern = "_.*?(?=($| ))", '', df$word, perl = T)
##############################
### 2) TOP NGRAMS
##############################
## 2.0) Print most partisan words:
cat("\n\n**** MOST PARTISAN BI & TRIGRAMS ****")
cat("\n\tDEMS:\n")
head(df[order(df$zeta),], 20)
cat("\n\tREPS:\n")
tail(df[order(df$zeta),], 20)
View(df)
x <- grep(pattern = "(^| )i_PRP", df$tagged)
tmp <- df[x,]
View(tmp)
